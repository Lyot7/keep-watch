/**
 * Script pour configurer la base de donn√©es PostgreSQL avec Docker
 *
 * Ce script:
 * 1. V√©rifie si le conteneur Docker est en cours d'ex√©cution
 * 2. Lance Docker si n√©cessaire (uniquement en environnement local)
 * 3. G√©n√®re le client Prisma
 * 4. Applique les migrations Prisma
 *
 * Ex√©cuter avec: node scripts/setup-db.js
 */

import { execSync } from "child_process";
import dotenv from "dotenv";

// Charger les variables d'environnement
dotenv.config();

console.log("üîß Configuration de la base de donn√©es PostgreSQL...");

// D√©terminer si on est dans Docker ou en local
const isInDocker =
  process.env.DATABASE_URL && process.env.DATABASE_URL.includes("@postgres:");
console.log(`üìå Environnement d√©tect√©: ${isInDocker ? "Docker" : "Local"}`);

try {
  // √âtape 1: Si on est en local, v√©rifier si le conteneur Docker est en cours d'ex√©cution
  if (!isInDocker) {
    console.log("\nüîç V√©rification du conteneur Docker...");
    try {
      const containerStatus = execSync(
        "docker ps --filter name=keepwatch-postgres --format '{{.Status}}'",
        {
          encoding: "utf8",
        }
      ).trim();

      if (containerStatus) {
        console.log("‚úÖ Le conteneur PostgreSQL est en cours d'ex√©cution.");
      } else {
        throw new Error("Container not running");
      }
    } catch (error) {
      console.log(
        "‚ö†Ô∏è Le conteneur PostgreSQL n'est pas en cours d'ex√©cution. D√©marrage..."
      );
      console.log(`   Erreur: ${error.message}`);

      try {
        execSync("docker-compose up -d postgres", { stdio: "inherit" });
        console.log("‚úÖ Conteneur PostgreSQL d√©marr√© avec succ√®s.");

        // Attendre que PostgreSQL soit pr√™t
        console.log("‚è≥ Attente de la disponibilit√© de PostgreSQL...");
        execSync("timeout /t 5", { stdio: "inherit" });
      } catch (dockerError) {
        console.error(
          "‚ùå Erreur lors du d√©marrage du conteneur Docker:",
          dockerError.message
        );
        process.exit(1);
      }
    }
  } else {
    console.log("\n‚è≥ Attente de la disponibilit√© de PostgreSQL...");
    // En environnement Docker, on suppose que le service postgres est d√©j√† configur√© et disponible
    try {
      // Attendre que PostgreSQL soit pr√™t (3 tentatives maximum)
      for (let i = 0; i < 3; i++) {
        try {
          execSync("npx prisma db pull --force", { stdio: "inherit" });
          console.log("‚úÖ Connexion PostgreSQL √©tablie.");
          break;
        } catch (e) {
          if (i === 2) throw e;
          console.log(
            `‚è≥ Tentative de connexion ${
              i + 1
            }/3 √©chou√©e, nouvel essai dans 3 secondes...`
          );
          execSync("sleep 3");
        }
      }
    } catch (error) {
      console.log(
        "‚ö†Ô∏è Impossible de se connecter √† PostgreSQL, mais on continue..."
      );
      console.log(`   Erreur: ${error.message}`);
    }
  }

  // √âtape 2: G√©n√©rer le client Prisma
  console.log("\nüì¶ G√©n√©ration du client Prisma...");
  execSync("npx prisma generate", { stdio: "inherit" });

  // √âtape 3: Appliquer les migrations
  console.log("\nüîÑ Application des migrations...");
  try {
    execSync("npx prisma migrate deploy", { stdio: "inherit" });
    console.log("‚úÖ Migrations appliqu√©es avec succ√®s.");
  } catch (migrateError) {
    console.log(
      "‚ö†Ô∏è Erreur pendant le d√©ploiement des migrations. Tentative de cr√©ation..."
    );
    console.log(`   Erreur: ${migrateError.message}`);
    try {
      execSync("npx prisma migrate dev --name init", { stdio: "inherit" });
    } catch (devMigrateError) {
      console.log("‚ùå Erreur pendant la cr√©ation des migrations:");
      console.log(`   Erreur: ${devMigrateError.message}`);
      console.log("‚ö†Ô∏è Continuons avec l'hypoth√®se que la base existe d√©j√†...");
    }
  }

  console.log("\n‚úÖ Configuration de la base de donn√©es termin√©e avec succ√®s!");
  console.log("\nüìù Vous pouvez maintenant d√©marrer l'application avec:");
  console.log("   npm run dev");

  console.log("\nüîé Pour explorer la base de donn√©es avec Prisma Studio:");
  console.log("   npx prisma studio");
} catch (error) {
  console.error(
    "\n‚ùå Erreur lors de la configuration de la base de donn√©es:",
    error.message
  );
  process.exit(1);
}
