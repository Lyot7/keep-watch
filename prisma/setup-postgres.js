/**
 * Script pour configurer la base de donn√©es PostgreSQL
 *
 * Ce script:
 * 1. Cr√©e la base de donn√©es si elle n'existe pas
 * 2. Applique les migrations Prisma
 * 3. Initialise les donn√©es n√©cessaires
 *
 * Ex√©cuter avec: node prisma/setup-postgres.js
 */

import { execSync } from "child_process";
import dotenv from "dotenv";

// Charger les variables d'environnement
dotenv.config();

console.log("üîß Configuration de la base de donn√©es PostgreSQL...");

try {
  // √âtape 1: G√©n√©rer le client Prisma
  console.log("\nüì¶ G√©n√©ration du client Prisma...");
  execSync("npx prisma generate", { stdio: "inherit" });

  // √âtape 2: V√©rifier si la base de donn√©es existe d√©j√†
  console.log("\nüîç V√©rification de la base de donn√©es...");
  // Cette commande √©chouera si la base n'existe pas, ce qui est normal
  try {
    execSync("npx prisma db pull", { stdio: "inherit" });
    console.log("‚úÖ Base de donn√©es existante d√©tect√©e.");
  } catch (dbError) {
    console.log("‚ö†Ô∏è Base de donn√©es non existante. Cr√©ation en cours...");
    console.log(`   Erreur: ${dbError.message}`);

    // Extraire les informations de connexion de l'URL de la base de donn√©es
    const url = process.env.DATABASE_URL;
    const matches = url.match(
      /postgresql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/([^?]+)/
    );

    if (!matches) {
      throw new Error("Format d'URL de base de donn√©es invalide.");
    }

    const dbName = matches[5];

    // Cr√©er la base de donn√©es (en se connectant √† la base 'postgres')
    const pgUrl = url.replace(dbName, "postgres");
    const createDbCmd = `psql "${pgUrl}" -c "CREATE DATABASE ${dbName};"`;

    try {
      execSync(createDbCmd);
      console.log(`‚úÖ Base de donn√©es '${dbName}' cr√©√©e avec succ√®s.`);
    } catch (createError) {
      console.error(
        "‚ùå Erreur lors de la cr√©ation de la base de donn√©es:",
        createError.message
      );
      console.log(
        "‚ö†Ô∏è Continuons avec l'hypoth√®se que la base existe mais n'est pas accessible via Prisma..."
      );
    }
  }

  // √âtape 3: Appliquer les migrations
  console.log("\nüîÑ Application des migrations...");
  execSync("npx prisma migrate dev --name init", { stdio: "inherit" });

  console.log("\n‚úÖ Configuration de la base de donn√©es termin√©e avec succ√®s!");
  console.log("\nüìù Vous pouvez maintenant d√©marrer l'application avec:");
  console.log("   npm run dev");

  console.log("\nüîé Pour explorer la base de donn√©es avec Prisma Studio:");
  console.log("   npm run prisma:studio");
} catch (error) {
  console.error(
    "\n‚ùå Erreur lors de la configuration de la base de donn√©es:",
    error.message
  );
  process.exit(1);
}
