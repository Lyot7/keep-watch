// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Mod√®le pour stocker les cha√Ænes YouTube
model YoutubeChannel {
  id            String    @id @default(uuid())
  channelId     String    @unique // ID de la cha√Æne YouTube
  title         String    // Titre de la cha√Æne
  description   String?   @db.Text // Description de la cha√Æne
  thumbnailUrl  String?   // URL de la vignette
  subscriberCount Int?    // Nombre d'abonn√©s (approximatif)
  lastUpdated   DateTime  @default(now()) // Derni√®re mise √† jour
  videos        YoutubeVideoCache[] // Relation avec les vid√©os
  isActive      Boolean   @default(true) // Si la cha√Æne est active pour la r√©cup√©ration
  
  @@index([channelId])
}

// Mod√®le pour stocker les vid√©os YouTube en cache
model YoutubeVideoCache {
  id              String   @id @default(uuid())
  videoId         String   @unique // ID de la vid√©o YouTube
  title           String   // Titre de la vid√©o
  description     String   @db.Text // Description de la vid√©o
  thumbnailUrl    String   // URL de la vignette
  channelTitle    String   // Titre de la cha√Æne
  channelId       String   // ID de la cha√Æne
  publishedAt     String   // Date de publication
  videoUrl        String   // URL de la vid√©o
  duration        String   // Dur√©e format√©e
  durationSeconds Int      // Dur√©e en secondes
  theme           String?  // Th√®me de la vid√©o
  state           String   @default("A voir !") // √âtat par d√©faut
  viewCount       Int?     // Nombre de vues (si disponible)
  likeCount       Int?     // Nombre de likes (si disponible)
  lastFetched     DateTime @default(now()) // Date de derni√®re r√©cup√©ration
  
  // Relations
  channel         YoutubeChannel @relation(fields: [channelId], references: [channelId])
  videoState      VideoState?    // Relation avec l'√©tat de la vid√©o
  videoThemes     VideoTheme[]   // Relation avec les th√®mes
  
  @@index([channelId])
  @@index([state])
  @@index([publishedAt])
}

// Mod√®le pour stocker l'√©tat des vid√©os
model VideoState {
  id              String   @id @default(uuid())
  videoId         String   @unique
  state           String   // "A voir !", "Vu", "ü§Ø", etc.
  duration        String?  // Dur√©e format√©e de la vid√©o (ex: "10:30")
  durationSeconds Int?     // Dur√©e en secondes pour le filtrage
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notes           String?  @db.Text // Notes personnelles sur la vid√©o
  rating          Int?     // √âvaluation personnelle (1-5 √©toiles)
  
  // Relation avec la vid√©o
  video           YoutubeVideoCache? @relation(fields: [videoId], references: [videoId])
}

// Mod√®le pour stocker les th√®mes personnalis√©s
model Theme {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  color       String?  // Couleur pour l'affichage (ex: "#FF5733")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relation avec les associations vid√©o-th√®me
  videoThemes VideoTheme[]
}

// Mod√®le pour associer des vid√©os √† des th√®mes personnalis√©s
model VideoTheme {
  id        String   @id @default(uuid())
  videoId   String
  themeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  video     YoutubeVideoCache @relation(fields: [videoId], references: [videoId])
  theme     Theme             @relation(fields: [themeId], references: [id])
  
  // Indique que videoId et themeId doivent √™tre uniques ensemble
  @@unique([videoId, themeId])
}

// Mod√®le pour le suivi de l'utilisation de l'API YouTube
model ApiQuotaUsage {
  id          String   @id @default(uuid())
  date        DateTime @default(now()) @db.Date // Date de l'utilisation
  quotaUsed   Int      @default(0) // Unit√©s de quota utilis√©es
  description String?  // Description de l'utilisation
  
  @@unique([date])
} 